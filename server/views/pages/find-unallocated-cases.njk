{% extends "../partials/allocation-view.njk" %}
{%- from "govuk/components/warning-text/macro.njk" import govukWarningText -%}
{%- from "govuk/components/select/macro.njk" import govukSelect -%}
{%- from "govuk/components/button/macro.njk" import govukButton -%}
{%- from "govuk/components/table/macro.njk" import govukTable -%}
{%- from "../components/doubleCell/macro.njk" import doubleCell -%}
{%- from "../components/tripleCell/macro.njk" import tripleCell -%}

{% set tableData = {
    attributes: {
        'data-module': 'moj-sortable-table',
        'data-persistent-id': 'find-unallocated-cases'
    },
    head: [
        { text: 'Name / CRN',
            attributes: {
                "col-number": "1",
                "aria-sort": "none",
                'data-persistent-id': 'find-unallocated-cases-name-crn'
            }
        },
        { text: 'Tier',
            attributes: {
                "col-number": "2",
                "aria-sort": "none",
                'data-persistent-id': 'find-unallocated-cases-tier'
            }
        },
        { text: 'Sentence date',
            attributes: {
                "col-number": "3",
                "aria-sort": "none",
                'data-persistent-id': 'find-unallocated-cases-sentence-date',
                "date-pattern-for-sort": 'YY-MM-YYYY'
            }
        },
        { text: 'COM Handover date',
            attributes: {
                "col-number": "4",
                "aria-sort": "none",
                'data-persistent-id': 'find-unallocated-cases-handover-date',
                "date-pattern-for-sort": 'YY-MM-YYYY'
            }
        },
        { text: 'Initial appointment date',
            attributes: {
                "col-number": "5",
                "aria-sort": "none",
                'data-persistent-id': 'find-unallocated-cases-appointment-date',
                "date-pattern-for-sort": 'YY-MM-YYYY'
            }
        },
        { text: 'Probation status',
            attributes: {
                "col-number": "6",
                "aria-sort": "none",
                'data-persistent-id': 'find-unallocated-cases-probation-status'
            }
        }
    ],
    rows: []
} %}

{% for item in unallocatedCases %}
    {% if item.outOfAreaTransfer == true %}
        {%- set tableRow = [
            { text: tripleCell(
                '<a href="/pdu/' + pduCode +'/' + item.crn + '/convictions/' + item.convictionNumber +'/case-view" " class="govuk-link--no-visited-state" aria-label="Review case" data-qa-link="' + item.crn + '-' + item.convictionNumber +'"">' +  item.name + '</a>',
                item.crn,
                'govuk-body-s',
                '<span><strong class="action-required">Action<br>required</strong></span>'
            )},
            { text: item.tier, attributes: { "data-sort-value": item.tierOrder } },
            { text: (item.sentenceDate | dateFormat), attributes: {
                "data-sort-value": item.sentenceDate
            } },
            { text: item.handoverDate, attributes: { "data-sort-value": item.handoverDate } },
            {
                colspan: "2",
                text: 'This case is sitting in a different area, and the transfer process must be completed in NDelius before it can be allocated through the service. You can still review the case details.', attributes: { "data-sort-value": item.tierOrder }
            }
        ] -%}
        {{ tableData.rows.push(tableRow) }}
    {% else %}
        {%- set tableRow = [
            { text: doubleCell('<a href="/pdu/' + pduCode +'/' + item.crn + '/convictions/' + item.convictionNumber +'/case-view" " class="govuk-link--no-visited-state" aria-label="Review case" data-qa-link="' + item.crn + '-' + item.convictionNumber +'"">' +  item.name + '</a>', item.crn, 'govuk-body-s' )},
            { text: item.tier, attributes: { "data-sort-value": item.tierOrder } },
            { text: (item.sentenceDate | dateFormat), attributes: {
                "data-sort-value": item.sentenceDate
            } },
            { text: item.handoverDate, attributes: { "data-sort-value": item.handoverDate } },
            { text: doubleCell(item.primaryInitialAppointment,item.secondaryInitialAppointment, 'maw-secondary' )},
            { text: doubleCell(item.primaryStatus, item.secondaryStatus, 'govuk-body-s')}
        ] -%}
        {{ tableData.rows.push(tableRow) }}
    {% endif %}
{% endfor %}

{% block allocationContent %}

        <div class="govuk-grid-row">
          <div class="govuk-grid-column-full">
            <h2 class="govuk-heading-l">Unallocated cases</h2>
            <p>To see allocation demand, specify the PDU, then LDU, then team name. Select ‘Save and view selection’ to see the cases awaiting allocation.</p>
            <div class="govuk-filter-background govuk-!-margin-bottom-7">
              <div class="moj-filter__selected-heading">
                <div class="moj-filter__heading-title">
                  <h2 class="govuk-heading-m">Select a team to view unallocated cases</h2>
                </div>
              </div>

              <form method="post">
                <input type="hidden" name="_csrf" value="{{ csrfToken }}">

                {{ govukSelect({
                  id: "pdu",
                  name: "pdu",
                  classes: "govuk-select--overflow",
                  formGroup: {
                    classes: "govuk-select--inline"
                  },
                  label: {
                    text: "Probation delivery unit (PDU)"
                  },
                  items: pduOptions,
                  errorMessage: errors | findError('pdu')
                })
                }}

                {{ govukSelect({
                  id: "ldu",
                  name: "ldu",
                  classes: "govuk-select--overflow",
                  formGroup: {
                    classes: "govuk-select--inline"
                  },
                  label: {
                    text: "Local delivery unit (LDU)"
                  },
                  items: lduOptions,
                  errorMessage: errors | findError('ldu')
                })
                }}

                {{ govukSelect({
                  id: "team",
                  name: "team",
                  classes: "govuk-select--overflow",
                  formGroup: {
                    classes: "govuk-select--inline"
                  },
                  label: {
                    text: "Team"
                  },
                  items: teamOptions,
                  errorMessage: errors | findError('team')
                })
                }}

                <div class="govuk-button-group">
                  {{ govukButton({
                      text: "Save and view selection"
                  }) }}
                  <a class="govuk-link" href="/pdu/{{pduDetails.code}}/clear-find-unallocated">Clear</a>
                </div>
              </form>
            </div>
          </div>
        </div>
        <div class="moj-scrollable-pane govuk-!-margin-bottom-9">
          <div class="moj-scrollable-pane__wrapper">
            {% if casesLength %}
              {{ govukTable(tableData) }}
            {% elif teamSelected %}
              <p class="govuk-body-l">
                There are no cases currently awaiting allocation.
              </p>
            {% endif %}
          </div>
        </div>

        <div class="govuk-grid-row">
          <div class="govuk-grid-column-full">
            <h2 class="govuk-heading-l">Allocating other types of cases</h2>
               <p>You’ll need to use NDelius to allocate cases that do not appear in the service, such as cases in OMIC teams, limited access offender cases, transition to adult cases, cases with unpaid work requirements, and cases with requirements not allocated to the primary practitioner.</p>
          </div>
        </div>

{% endblock %}

{% block javascripts %}
    <script nonce="{{ cspNonce }}">
        var dropDownSelectionData = {{ dropDownSelectionData | safe }}
        window.onload = function() {
          var pduSelect = document.getElementById("pdu")
          var lduSelect = document.getElementById("ldu")
          var teamSelect = document.getElementById("team")

          pduSelect.onchange = function() {
            lduSelect.length = 1
            teamSelect.length = 1
            if(this.value) {
              Object.entries(dropDownSelectionData[this.value].ldus)
              .sort(([aKey,aValue],[bKey,bValue]) => aValue.name >= bValue.name ? 1 : 0)
              .forEach(([key, value]) => lduSelect.options[lduSelect.options.length] = new Option(value.name, key))
            }
          }

          lduSelect.onchange = function() {
            teamSelect.length = 1
            if(this.value) {
              dropDownSelectionData[pduSelect.value].ldus[this.value].teams
              .sort((a,b) => a.name >= b.name ? 1 : 0)
              .forEach(team => teamSelect.options[teamSelect.options.length] = new Option(team.name, team.code))
            }
          }


        }
    </script>
{% endblock %}

